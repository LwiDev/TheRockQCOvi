package ca.lwi.trqcbot.reputation;

import org.bson.Document;

import java.awt.*;

public class ReputationManager {

    public static int calculateReputation(Document userData) {
        Document reputation = (Document) userData.get("reputation");
        if (reputation == null) return 0;

        int messagesCount = reputation.getInteger("messagesCount", 0);
        int reputationScore = 0;

        // Bonus de v√©t√©ran
        boolean isVeteran = userData.getString("currentRank").contains("V√©t√©ran");
        if (isVeteran) reputationScore += 15;

        // P√©nalit√© d'inactivit√©
        reputationScore = getInactiveScore(reputation, reputationScore);

        // Bonus d'interactions
        int reputationActionBonus = calculateReputationActionBonus(reputation);
        reputationScore += reputationActionBonus;

        // Bonus de messages quotidiens
        int dailyMessages = reputation.getInteger("dailyMessagesCount", 0);
        int avgDailyMessages = reputation.getInteger("avgDailyMessages", dailyMessages);
        int messageWeightedAvg = calculateWeightedAverage(dailyMessages, avgDailyMessages);

        reputationScore = applyDailyActivityFactor(reputationScore, messageWeightedAvg, messagesCount);

        // Bonus d'activit√© vocale
        int voiceActivityBonus = calculateVoiceActivityBonus(reputation);
        reputationScore += voiceActivityBonus;

        // Facteur bas√© sur le nombre total de messages - progression graduelle
        if (messagesCount <= 30) {
            reputationScore = (int) (reputationScore * 0.7);
        } else if (messagesCount <= 100) {
            reputationScore = (int) (reputationScore * 0.85);
        } else if (messagesCount <= 300) {
            reputationScore = (int) (reputationScore * 0.95);
        } else if (messagesCount <= 600) {
            reputationScore = (int) (reputationScore * 1.05);
        } else {
            reputationScore = (int) (reputationScore * 1.15);
        }

        return Math.max(0, Math.min(reputationScore, 100));
    }

    private static int calculateWeightedAverage(int dailyMessages, int avgDailyMessages) {
        return (int) Math.round(dailyMessages * 0.3 + avgDailyMessages * 0.7);
    }

    private static int applyDailyActivityFactor(int reputationScore, int weightedDailyMessages, int totalMessages) {
        // La p√©nalit√©/bonus est moins s√©v√®re et prend en compte l'historique
        if (weightedDailyMessages > 60) {
            reputationScore = (int) (reputationScore * 1.08);
        } else if (weightedDailyMessages > 30) {
            reputationScore = (int) (reputationScore * 1.03);
        } else if (weightedDailyMessages < 10 && totalMessages < 100) {
            // P√©nalit√© significative seulement pour les nouveaux utilisateurs peu actifs
            reputationScore = (int) (reputationScore * 0.85);
        } else if (weightedDailyMessages < 15 && totalMessages < 300) {
            // P√©nalit√© l√©g√®re pour les utilisateurs mod√©r√©ment √©tablis
            reputationScore = (int) (reputationScore * 0.92);
        } else if (weightedDailyMessages < 15) {
            // P√©nalit√© tr√®s l√©g√®re pour les utilisateurs bien √©tablis
            reputationScore = (int) (reputationScore * 0.97);
        }
        return reputationScore;
    }

    private static int calculateReputationActionBonus(Document reputation) {
        int bonus = 0;
        int responses = reputation.getInteger("responsesCount", 0);
        int tags = reputation.getInteger("tagsCount", 0);

        // Points pour les r√©ponses, avec plafonnement progressif
        if (responses <= 10) {
            bonus += responses;
        } else if (responses <= 50) {
            bonus += (int) (10 + (responses - 10) * 0.7);
        } else {
            bonus += (int) (10 + 40 * 0.7 + (responses - 50) * 0.4);
        }

        // Points pour les tags, valoris√©s mais √©galement plafonn√©s
        if (tags <= 10) {
            bonus += tags * 2;
        } else if (tags <= 30) {
            bonus += (int) (20 + (tags - 10) * 1.5);
        } else {
            bonus += (int) (20 + 20 * 1.5 + (tags - 30) * 0.8);
        }

        return bonus;
    }

    private static int calculateVoiceActivityBonus(Document reputation) {
        int totalVoiceMinutes = reputation.getInteger("totalVoiceMinutes", 0);
        int dailyVoiceMinutes = reputation.getInteger("dailyVoiceMinutes", 0);
        int voiceDaysActive = reputation.getInteger("voiceDaysActive", 0);

        int voiceBonus = 0;

        // Bonus pour l'activit√© quotidienne avec une courbe de rendement d√©croissant
        if (dailyVoiceMinutes >= 120) {
            voiceBonus += 8; // Maximum pour 2h ou plus
        } else if (dailyVoiceMinutes >= 60) {
            voiceBonus += 5; // Pour 1h - 2h
        } else if (dailyVoiceMinutes >= 20) {
            voiceBonus += 2; // Pour 20min - 1h
        }

        // Bonus pour la r√©gularit√© (nombre de jours avec activit√© vocale)
        if (voiceDaysActive >= 20) {
            voiceBonus += 7; // Utilisateur tr√®s r√©gulier
        } else if (voiceDaysActive >= 10) {
            voiceBonus += 4; // Utilisateur r√©gulier
        } else if (voiceDaysActive >= 5) {
            voiceBonus += 2; // Utilisateur occasionnel
        }

        // Bonus pour l'activit√© totale avec plafonnement
        if (totalVoiceMinutes > 6000) {      // 100h+
            voiceBonus += 10;
        } else if (totalVoiceMinutes > 3000) { // 50h+
            voiceBonus += 7;
        } else if (totalVoiceMinutes > 1200) { // 20h+
            voiceBonus += 4;
        } else if (totalVoiceMinutes > 300) {  // 5h+
            voiceBonus += 2;
        }

        // Plafonner √† 20 points pour √©viter que ce soit over-powered
        return Math.min(20, voiceBonus);
    }

    private static int getInactiveScore(Document reputation, int reputationScore) {
        // V√©rifier si reputation est null
        if (reputation == null) {
            return reputationScore;
        }

        // R√©cup√©rer lastActive, avec une valeur par d√©faut si c'est null
        Long lastActiveObj = reputation.get("lastActive", Long.class);
        Long joinDateObj = reputation.get("joinDate", Long.class);

        // Si les deux sont null, on ne peut pas calculer l'inactivit√©
        if (lastActiveObj == null && joinDateObj == null) {
            return reputationScore;
        }

        // Utiliser lastActive s'il existe, sinon utiliser joinDate
        long lastActiveTimestamp = lastActiveObj != null ? lastActiveObj : joinDateObj;
        long daysInactive = (System.currentTimeMillis() - lastActiveTimestamp) / (1000 * 60 * 60 * 24);

        if (daysInactive > 30) {
            reputationScore -= 20; // Tr√®s longue inactivit√©
        } else if (daysInactive > 21) {
            reputationScore -= 15; // Longue inactivit√©
        } else if (daysInactive > 14) {
            reputationScore -= 10; // Inactivit√© moyenne
        } else if (daysInactive > 7) {
            reputationScore -= 5;  // Courte inactivit√©
        }
        return reputationScore;
    }

    public static String getReputationRank(int reputationScore) {
        if (reputationScore > 90) {
            return "üåü L√©gende";
        } else if (reputationScore > 60) {
            return "üî• Respect√©";
        } else if (reputationScore > 40) {
            return "üó£Ô∏è Connu";
        } else if (reputationScore > 20) {
            return "üëã Pr√©sent";
        } else {
            return "üí® Invisible";
        }
    }

    public static Color getRepurationRankColor(String rank) {
        return switch (rank) {
            case "üåü L√©gende" -> new Color(255, 215, 0); // Or
            case "üî• Respect√©" -> new Color(220, 100, 50); // Orange-rouge
            case "üó£Ô∏è Connu" -> new Color(100, 180, 220); // Bleu clair
            case "üëã Pr√©sent" -> new Color(100, 220, 100); // Vert
            default -> new Color(150, 150, 150); // Gris
        };
    }
}
