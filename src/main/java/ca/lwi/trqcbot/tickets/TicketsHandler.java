package ca.lwi.trqcbot.tickets;

import ca.lwi.trqcbot.Main;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel;
import net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu;
import org.bson.Document;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

public class TicketsHandler extends ListenerAdapter {

    private static final Logger LOGGER = LoggerFactory.getLogger(TicketsHandler.class);

    // ID du channel de cr√©ation de tickets
    private final String ticketChannelId = "1357158503541641266";

    // Constantes pour les IDs des boutons
    private static final String CREATE_TICKET_BUTTON = "create_ticket";
    private static final String ARCHIVE_TICKET_BUTTON = "archive_ticket";
    private static final String UNARCHIVE_SELECT_MENU = "unarchive_ticket_select";

    // Collection MongoDB pour stocker les tickets
    private MongoCollection<Document> ticketsCollection;

    public TicketsHandler() {
        this.ticketsCollection = Main.getMongoConnection().getDatabase().getCollection("tickets");
    }

    /**
     * Initialise le syst√®me de tickets en envoyant le message de cr√©ation de ticket
     * dans le channel d√©di√©.
     *
     * @param guild La guilde (serveur Discord)
     */
    public void initialize(Guild guild) {
        TextChannel ticketChannel = guild.getTextChannelById(ticketChannelId);
        if (ticketChannel == null) {
            LOGGER.error("Channel de tickets non trouv√©: {}", ticketChannelId);
            return;
        }

        // Supprime les anciens messages pour √©viter les doublons
        ticketChannel.getIterableHistory().queue(history -> {
            if (!history.isEmpty()) {
                ticketChannel.purgeMessages(history);
            }

            // Cr√©e et envoie le nouveau message de cr√©ation de ticket
            sendTicketCreationMessage(ticketChannel);
        });
    }

    /**
     * Envoie le message de cr√©ation de ticket dans le channel sp√©cifi√©
     *
     * @param channel Le channel o√π envoyer le message
     */
    private void sendTicketCreationMessage(TextChannel channel) {
        MessageEmbed embed = new EmbedBuilder()
                .setTitle("Syst√®me de tickets")
                .setDescription("Besoin d'aide ? Une question ? Un probl√®me ? Cr√©ez un ticket en cliquant sur le bouton ci-dessous et un membre de notre √©quipe vous assistera d√®s que possible.")
                .setColor(Color.BLUE)
                .addField("Comment √ßa fonctionne ?", "En cliquant sur le bouton, un nouveau thread sera cr√©√© sp√©cifiquement pour votre demande. Veuillez fournir le plus de d√©tails possible concernant votre requ√™te.", false)
                .addField("D√©lai d'inactivit√©", "Les tickets inactifs pendant plus d'une semaine seront automatiquement archiv√©s.", false)
                .build();

        Button createButton = Button.primary(CREATE_TICKET_BUTTON, "Cr√©er un ticket")
                .withEmoji(Emoji.fromUnicode("üé´"));

        channel.sendMessageEmbeds(embed)
                .addActionRow(createButton)
                .queue();

        LOGGER.info("Message de cr√©ation de ticket envoy√© dans le channel {}", channel.getName());
    }

    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        String buttonId = event.getComponentId();

        switch (buttonId) {
            case CREATE_TICKET_BUTTON:
                handleCreateTicket(event);
                break;
            case ARCHIVE_TICKET_BUTTON:
                handleArchiveButton(event);
                break;
        }
    }

    @Override
    public void onStringSelectInteraction(@NotNull StringSelectInteractionEvent event) {
        if (event.getComponentId().equals(UNARCHIVE_SELECT_MENU)) {
            String threadId = event.getValues().get(0);

            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("Impossible de trouver le serveur.").setEphemeral(true).queue();
                return;
            }

            ThreadChannel thread = guild.getThreadChannelById(threadId);
            if (thread == null) {
                // Essayer de r√©cup√©rer le channel parent et le thread
                Document ticketDoc = ticketsCollection.find(Filters.eq("threadId", threadId)).first();
                if (ticketDoc != null) {
                    String parentChannelId = ticketDoc.getString("parentChannelId");
                    TextChannel parentChannel = guild.getTextChannelById(parentChannelId);
                    if (parentChannel != null) {
                        parentChannel.retrieveArchivedPublicThreadChannels()
                                .queue(threads -> {
                                    ThreadChannel targetThread = threads.stream()
                                            .filter(t -> t.getId().equals(threadId))
                                            .findFirst()
                                            .orElse(null);

                                    if (targetThread != null) {
                                        unarchiveTicket(event, targetThread);
                                    } else {
                                        parentChannel.retrieveArchivedPrivateThreadChannels()
                                                .queue(privateThreads -> {
                                                    ThreadChannel privateTargetThread = privateThreads.stream()
                                                            .filter(t -> t.getId().equals(threadId))
                                                            .findFirst()
                                                            .orElse(null);

                                                    if (privateTargetThread != null) {
                                                        unarchiveTicket(event, privateTargetThread);
                                                    } else {
                                                        event.reply("Impossible de trouver ce ticket, il a peut-√™tre √©t√© supprim√©.").setEphemeral(true).queue();
                                                    }
                                                }, error -> {
                                                    event.reply("Erreur lors de la r√©cup√©ration des threads priv√©s.").setEphemeral(true).queue();
                                                    LOGGER.error("Erreur lors de la r√©cup√©ration des threads priv√©s: {}", error.getMessage());
                                                });
                                    }
                                }, error -> {
                                    event.reply("Erreur lors de la r√©cup√©ration des threads.").setEphemeral(true).queue();
                                    LOGGER.error("Erreur lors de la r√©cup√©ration des threads publics: {}", error.getMessage());
                                });
                        return;
                    }
                }

                event.reply("Impossible de trouver ce ticket, il a peut-√™tre √©t√© supprim√©.").setEphemeral(true).queue();
                return;
            }

            unarchiveTicket(event, thread);
        }
    }

    /**
     * D√©sarchive un ticket √† partir du menu de s√©lection
     *
     * @param event L'√©v√©nement de s√©lection
     * @param thread Le thread √† d√©sarchiver
     */
    private void unarchiveTicket(StringSelectInteractionEvent event, ThreadChannel thread) {
        thread.getManager().setArchived(false).queue(
                success -> {
                    MessageEmbed embed = new EmbedBuilder()
                            .setTitle("Ticket d√©sarchiv√©")
                            .setDescription("Ce ticket a √©t√© d√©sarchiv√©. Il sera automatiquement archiv√© apr√®s une semaine d'inactivit√©.")
                            .setColor(Color.GREEN)
                            .setFooter("ID du ticket: " + thread.getId(), null)
                            .build();

                    thread.sendMessageEmbeds(embed).queue();

                    // Mettre √† jour dans MongoDB
                    ticketsCollection.updateOne(
                            Filters.eq("threadId", thread.getId()),
                            Updates.set("archived", false)
                    );

                    event.reply("Le ticket a √©t√© d√©sarchiv√© avec succ√®s.").setEphemeral(true).queue();
                    LOGGER.info("Ticket d√©sarchiv√©: {}", thread.getName());
                },
                error -> {
                    event.reply("Erreur lors du d√©sarchivage du ticket: " + error.getMessage()).setEphemeral(true).queue();
                    LOGGER.error("Erreur lors du d√©sarchivage du ticket {}: {}", thread.getName(), error.getMessage());
                }
        );
    }

    /**
     * Cr√©e un nouveau ticket (thread) quand un utilisateur clique sur le bouton
     *
     * @param event L'√©v√©nement de clic sur le bouton
     */
    private void handleCreateTicket(ButtonInteractionEvent event) {
        LOGGER.info("D√©but handleCreateTicket - User: {}", event.getUser().getName());

        if (event.getGuild() == null) {
            event.reply("Cette fonction ne peut √™tre utilis√©e que sur un serveur.").setEphemeral(true).queue();
            return;
        }

        event.deferReply(true).queue(hook -> {
            try {
                // D√©terminer le num√©ro du ticket en comptant les documents existants + 1
                long ticketCount = ticketsCollection.countDocuments() + 1;
                String threadName = "ticket-" + event.getUser().getName().toLowerCase() + "-" + ticketCount;
                LOGGER.info("Cr√©ation du ticket num√©ro {}: {}", ticketCount, threadName);

                TextChannel parentChannel = event.getChannel().asTextChannel();

                // Cr√©ation du thread
                parentChannel.createThreadChannel(threadName, true)
                        .setAutoArchiveDuration(ThreadChannel.AutoArchiveDuration.TIME_1_WEEK)
                        .queue(
                                threadChannel -> {
                                    LOGGER.info("Thread cr√©√© avec succ√®s: {}", threadChannel.getName());

                                    hook.sendMessage("Votre ticket a √©t√© cr√©√© avec succ√®s dans " + threadChannel.getAsMention()).queue();

                                    MessageEmbed welcomeEmbed = new EmbedBuilder()
                                            .setTitle("Ticket ouvert")
                                            .setDescription("Bonjour " + event.getUser().getAsMention() + ", merci d'avoir cr√©√© un ticket. " +
                                                    "Veuillez d√©crire votre probl√®me ou votre question en d√©tail, et un membre de notre √©quipe vous aidera d√®s que possible.")
                                            .setColor(Color.GREEN)
                                            .addField("Information", "Ce ticket sera automatiquement archiv√© apr√®s une semaine d'inactivit√©. " +
                                                    "Vous pouvez manuellement archiver ce ticket en utilisant le bouton ci-dessous une fois votre probl√®me r√©solu.", false)
                                            .setFooter("ID du ticket: " + threadChannel.getId() + " | Ticket #" + ticketCount, null)
                                            .build();

                                    Button archiveButton = Button.secondary(ARCHIVE_TICKET_BUTTON, "Fermer").withEmoji(Emoji.fromUnicode("üìÅ"));

                                    threadChannel.sendMessageEmbeds(welcomeEmbed)
                                            .addActionRow(archiveButton)
                                            .queue();

                                    // Ajouter l'utilisateur qui a cr√©√© le ticket
                                    threadChannel.addThreadMember(event.getUser()).queue();

                                    // Ajouter tous les administrateurs
                                    LOGGER.info("Ajout des administrateurs au thread");
                                    event.getGuild().loadMembers().onSuccess(members -> {
                                        for (Member member : members) {
                                            if (member.hasPermission(Permission.ADMINISTRATOR) && !member.getUser().isBot()) {
                                                LOGGER.info("Ajout de l'administrateur {} au thread", member.getUser().getName());
                                                threadChannel.addThreadMember(member).queue(
                                                        success -> LOGGER.debug("Admin {} ajout√© au thread", member.getUser().getName()),
                                                        error -> LOGGER.warn("Erreur ajout admin {}: {}", member.getUser().getName(), error.getMessage())
                                                );
                                            }
                                        }
                                    });

                                    // MongoDB
                                    Document ticketDoc = new Document()
                                            .append("threadId", threadChannel.getId())
                                            .append("ticketNumber", ticketCount)
                                            .append("userId", event.getUser().getId())
                                            .append("userName", event.getUser().getName())
                                            .append("parentChannelId", parentChannel.getId())
                                            .append("createdAt", Instant.now().toString())
                                            .append("archived", false);

                                    ticketsCollection.insertOne(ticketDoc);
                                    LOGGER.info("Ticket #{} enregistr√© dans MongoDB", ticketCount);
                                },
                                error -> {
                                    LOGGER.error("Erreur cr√©ation thread: {}", error.getMessage());
                                    hook.sendMessage("Erreur lors de la cr√©ation du ticket: " + error.getMessage()).queue();
                                }
                        );
            } catch (Exception e) {
                LOGGER.error("Exception lors de la cr√©ation du ticket: {}", e.getMessage(), e);
                hook.sendMessage("Une erreur inattendue s'est produite.").queue();
            }
        });
    }

    /**
     * G√®re l'archivage d'un ticket via le bouton
     *
     * @param event L'√©v√©nement de clic sur le bouton
     */
    private void handleArchiveButton(ButtonInteractionEvent event) {
        if (event.getGuild() == null || !(event.getChannel() instanceof ThreadChannel)) {
            event.reply("Cette action n'est possible que dans un thread de ticket.").setEphemeral(true).queue();
            return;
        }

        ThreadChannel threadChannel = event.getChannel().asThreadChannel();

        MessageEmbed embed = new EmbedBuilder()
                .setTitle("Ticket archiv√©")
                .setDescription("Ce ticket a √©t√© archiv√©. Un administrateur peut le d√©sarchiver avec la commande `/ticket unarchive`.")
                .setColor(Color.ORANGE)
                .setFooter("ID du ticket: " + threadChannel.getId(), null)
                .build();

        threadChannel.sendMessageEmbeds(embed).queue(message -> {
            // Archiver le thread
            threadChannel.getManager().setArchived(true).queue(
                    success -> {
                        // Mettre √† jour le statut dans MongoDB
                        ticketsCollection.updateOne(
                                Filters.eq("threadId", threadChannel.getId()),
                                Updates.set("archived", true)
                        );

                        event.reply("Le ticket a √©t√© archiv√©.").setEphemeral(true).queue();
                        LOGGER.info("Ticket archiv√©: {}", threadChannel.getName());
                    },
                    error -> {
                        event.reply("Erreur lors de l'archivage du ticket: " + error.getMessage()).setEphemeral(true).queue();
                        LOGGER.error("Erreur lors de l'archivage du ticket {}: {}", threadChannel.getName(), error.getMessage());
                    }
            );
        });
    }

    /**
     * G√®re la commande '/ticket archive'
     *
     * @param guild La guilde
     * @param channel Le channel √† archiver
     */
    public void handleArchive(MessageChannel channel) {
        if (!(channel instanceof ThreadChannel threadChannel)) {
            LOGGER.error("Tentative d'archiver un channel qui n'est pas un thread: {}", channel.getName());
            return;
        }
        if (!threadChannel.getName().startsWith("ticket-")) {
            LOGGER.error("Tentative d'archiver un thread qui n'est pas un ticket: {}", threadChannel.getName());
            return;
        }
        MessageEmbed embed = new EmbedBuilder()
                .setTitle("Ticket archiv√©")
                .setDescription("Ce ticket a √©t√© archiv√© par un administrateur. Un administrateur peut le d√©sarchiver avec la commande `/ticket unarchive`.")
                .setColor(Color.ORANGE)
                .setFooter("ID du ticket: " + threadChannel.getId(), null)
                .build();

        threadChannel.sendMessageEmbeds(embed).queue(message -> {
            threadChannel.getManager().setArchived(true).queue(
                    success -> {
                        ticketsCollection.updateOne(
                                Filters.eq("threadId", threadChannel.getId()),
                                Updates.set("archived", true)
                        );
                        LOGGER.info("Ticket archiv√© par commande: {}", threadChannel.getName());
                    },
                    error -> LOGGER.error("Erreur lors de l'archivage du ticket {}: {}", threadChannel.getName(), error.getMessage())
            );
        });
    }

    /**
     * Affiche un s√©lecteur des tickets archiv√©s d'un utilisateur pour d√©sarchivage
     *
     * @param event L'√©v√©nement de commande slash
     */
    public void handleUnarchiveCommand(SlashCommandInteractionEvent event) {
        if (event.getGuild() == null) {
            event.getHook().sendMessage("Cette commande ne peut √™tre utilis√©e que sur un serveur.").setEphemeral(true).queue();
            return;
        }

        // Obtenir la liste des tickets archiv√©s
        List<Document> archivedTickets = ticketsCollection.find(Filters.eq("archived", true))
                .into(new ArrayList<>());

        if (archivedTickets.isEmpty()) {
            event.getHook().sendMessage("Aucun ticket archiv√© trouv√©.").setEphemeral(true).queue();
            return;
        }

        // Cr√©er le menu de s√©lection
        StringSelectMenu.Builder menuBuilder = StringSelectMenu.create(UNARCHIVE_SELECT_MENU)
                .setPlaceholder("S√©lectionnez un ticket √† d√©sarchiver")
                .setRequiredRange(1, 1);

        for (Document ticket : archivedTickets) {
            String threadId = ticket.getString("threadId");
            String userName = ticket.getString("userName");
            String createdAt = ticket.getString("createdAt");

            // Format: Ticket de User (cr√©√© le 2025-04-10)
            String label = "Ticket de " + userName;
            String description = "Cr√©√© le " + Instant.parse(createdAt).toString().split("T")[0];

            menuBuilder.addOption(label, threadId, description);
        }

        StringSelectMenu menu = menuBuilder.build();

        // Envoyer le menu
        event.getHook().sendMessage("Veuillez s√©lectionner le ticket √† d√©sarchiver:")
                .addActionRow(menu)
                .setEphemeral(true)
                .queue();
    }
}